package bitcamp.java110.cms.dao.impl;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import bitcamp.java110.cms.annotation.Component;
import bitcamp.java110.cms.dao.DaoException;
import bitcamp.java110.cms.dao.ManagerDao;
import bitcamp.java110.cms.domain.Manager;

@Component
public class ManagerJdbcDao implements ManagerDao {
    
    public int insert(Manager manager) {
        Connection con = null;
        Statement stmt = null;
        ResultSet autoGeneratedKeys = null;
        
        try {
            Class.forName("org.mariadb.jdbc.Driver");
            con = DriverManager.getConnection(
                    "jdbc:mariadb://localhost:3306/studyDB",
                    "study","1111");
            con.setAutoCommit(false);
            stmt = con.createStatement();
            
            String sql = " insert into p1_memb(name,email,pwd,tel,cdt) "
                                   + " values('" + manager.getName() 
                                   + "','" + manager.getEmail() 
                                   + "',password('" + manager.getPassword()
                                   + "'),'" + manager.getTel() 
                                   + "',now())";
            
            System.out.println(sql);
//            cnt = stmt.executeUpdate(sql);
            
            // p1_memb 테이블에 회원 기본 정보를 입력 한 후
            // 자동으로 생성된 회원 번호를 리턴 받는다.
            stmt.executeUpdate(sql, Statement.RETURN_GENERATED_KEYS);
            
            // insert 를 실행한 후 리턴 받은 자동증가 PK 값을 꺼내기
            autoGeneratedKeys = stmt.getGeneratedKeys();
            autoGeneratedKeys.next();
            int memberNo = autoGeneratedKeys.getInt(1);
            autoGeneratedKeys.close();
            
            // 회원 번호로 매니저 테이블에 직위 정보를 입력한다.
            String sql2 = " insert into p1_mgr(mrno,posi) values("
                    + memberNo 
                    + ",'" + manager.getPosition()
                    + "')";
            
            stmt.executeUpdate(sql2);
            
            con.commit();
            return 1;
            
        } catch (Exception e) { 
            System.out.println(e);
            new DaoException(e);
        } finally {
                if(autoGeneratedKeys != null) {
                    try {autoGeneratedKeys.close();} 
                    catch (SQLException e) {e.printStackTrace();}}
                try {stmt.close();} catch (SQLException e) {e.printStackTrace();}
                try {con.close(); } catch (SQLException e) {e.printStackTrace();}
        }
        return 0;
    }
    
    public List<Manager> findAll() {
        
        ArrayList<Manager> list = new ArrayList<>();
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        
        try {
            //=> java.sql.Driver 구현체를 로딩한다.
            //=> 해당 클래스의 객체를 만들어 DriverManager에 등록한다.
            Class.forName("org.mariadb.jdbc.Driver");
//            위는 이렇게 작성하는것과 동일하다.
//            DriverManager.registerDriver(new org.mariadb.jdbc.Driver());
            
            
//            DriverManager에게 java.sql.Connection 객체를 요구한다.
//            DriverManager는 등록된 Driver 들 중에서 요구 사항에 맞는
//            드라이버를 찾아 connect()를 호출한다.
//            그리고 connect() 메서드의 리턴 값을 그대로 리턴해 준다.
            con = DriverManager.getConnection(
                    "jdbc:mariadb://localhost:3306/studyDB",
                    "study","1111");
            
            //=> 질의문을 작성할 객체를 준비한다.
            stmt = con.createStatement();
            
            //=> select 질의를 한다.
            rs = stmt.executeQuery(" select m.mno, m.name, m.email, mr.posi " +
                              " from p1_mgr mr " +
                              " inner join p1_memb m on mr.mrno = m.mno ");
            // 서버에 생성된 질의 결과를 한 개씩 가져온다.
            while(rs.next()) {
                Manager mgr = new Manager();
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setPosition(rs.getString("posi"));
                list.add(mgr);
            }
        } catch (Exception e) {
           new DaoException(e);
        } finally {
            try {rs.close();  } catch (SQLException e) {e.printStackTrace();}
            try {stmt.close();} catch (SQLException e) {e.printStackTrace();}
            try {con.close(); } catch (SQLException e) {e.printStackTrace();}
            
        }
        return list;
    }
    
    public Manager findByEmail(String email) {
        
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        
        try {
            //=> java.sql.Driver 구현체를 로딩한다.
            //=> 해당 클래스의 객체를 만들어 DriverManager에 등록한다.
            Class.forName("org.mariadb.jdbc.Driver");
//            위는 이렇게 작성하는것과 동일하다.
//            DriverManager.registerDriver(new org.mariadb.jdbc.Driver());
            
            
//            DriverManager에게 java.sql.Connection 객체를 요구한다.
//            DriverManager는 등록된 Driver 들 중에서 요구 사항에 맞는
//            드라이버를 찾아 connect()를 호출한다.
//            그리고 connect() 메서드의 리턴 값을 그대로 리턴해 준다.
            con = DriverManager.getConnection(
                    "jdbc:mariadb://localhost:3306/studyDB",
                    "study","1111");
            
            //=> 질의문을 작성할 객체를 준비한다.
            stmt = con.createStatement();
            
            //=> select 질의를 한다.
            rs = stmt.executeQuery(" select m.mno, m.name, m.email, mr.posi " +
                              " from p1_mgr mr " +
                              " inner join p1_memb m on mr.mrno = m.mno " +
                              " where m.email = '"
                              + email +"'");
            // 서버에 생성된 질의 결과를 한 개씩 가져온다.
            if(rs.next()) {
                Manager mgr = new Manager();
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setPosition(rs.getString("posi"));
                return mgr;
            }
            
        } catch (Exception e) {
           new DaoException(e);
        } finally {
            try {rs.close();  } catch (SQLException e) {e.printStackTrace();}
            try {stmt.close();} catch (SQLException e) {e.printStackTrace();}
            try {con.close(); } catch (SQLException e) {e.printStackTrace();}
        }
        return null;
    }
    
    public Manager findByNo(int no) {
        
        Connection con = null;
        Statement stmt = null;
        ResultSet rs = null;
        
        try {
            //=> java.sql.Driver 구현체를 로딩한다.
            //=> 해당 클래스의 객체를 만들어 DriverManager에 등록한다.
            Class.forName("org.mariadb.jdbc.Driver");
//            위는 이렇게 작성하는것과 동일하다.
//            DriverManager.registerDriver(new org.mariadb.jdbc.Driver());
            
            
//            DriverManager에게 java.sql.Connection 객체를 요구한다.
//            DriverManager는 등록된 Driver 들 중에서 요구 사항에 맞는
//            드라이버를 찾아 connect()를 호출한다.
//            그리고 connect() 메서드의 리턴 값을 그대로 리턴해 준다.
            con = DriverManager.getConnection(
                    "jdbc:mariadb://localhost:3306/studyDB",
                    "study","1111");
            
            //=> 질의문을 작성할 객체를 준비한다.
            stmt = con.createStatement();
            
            //=> select 질의를 한다.
            rs = stmt.executeQuery(" select m.mno, m.name, m.email, mr.posi " +
                    " from p1_mgr mr " +
                    " inner join p1_memb m on mr.mrno = m.mno " +
                    " where m.mno = "
                    + no );
            // 서버에 생성된 질의 결과를 한 개씩 가져온다.
            if(rs.next()) {
                Manager mgr = new Manager();
                mgr.setNo(rs.getInt("mno"));
                mgr.setEmail(rs.getString("email"));
                mgr.setName(rs.getString("name"));
                mgr.setPosition(rs.getString("posi"));
                return mgr;
            }
            
        } catch (Exception e) {
            new DaoException(e);
        } finally {
            try {rs.close();  } catch (SQLException e) {e.printStackTrace();}
            try {stmt.close();} catch (SQLException e) {e.printStackTrace();}
            try {con.close(); } catch (SQLException e) {e.printStackTrace();}
        }
        return null;
    }
    
    public int deleteByNo(int no) {
        Connection con = null;
        Statement stmt = null;
        
        try {
            Class.forName("org.mariadb.jdbc.Driver");
            con = DriverManager.getConnection(
                    "jdbc:mariadb://localhost:3306/studyDB",
                    "study","1111");
            con.setAutoCommit(false);
            stmt = con.createStatement();
            
            String sql = " delete from p1_mgr "
                       + "  where mrno = '"
                       + no + "' ";
            
            int count = stmt.executeUpdate(sql);
            
            if (count==0)
                return 0;
            
            String sql2 = " delete from p1_memb "
                        + "  where mno = '"
                        + no + "' ";
            
            stmt.executeUpdate(sql2);
            
            con.commit();
            return 1;
            
        } catch (Exception e) {
            System.out.println(e);
            new DaoException(e);
        } finally {
                try {stmt.close();} catch (SQLException e) {e.printStackTrace();}
                try {con.close(); } catch (SQLException e) {e.printStackTrace();}
        }
        return 0;
    }
}
